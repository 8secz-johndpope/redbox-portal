{
	"info": {
		"_postman_id": "ea76cab5-157b-420c-8ebd-7ca813ea56e0",
		"name": "Redbox Portal API - With tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "REST API",
			"item": [
				{
					"name": "Create RDMP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cf454ae-e6f0-45cf-8cc8-854649df6b0c",
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Test oid exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('oid');",
									"    postman.setEnvironmentVariable(\"dmpOid\", jsonData.oid);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Andrew's Postman test\",\n    \"dc:identifier\": \"http://purl.org/au-research/grants/nhmrc/566728\",\n    \"description\": \"Movement of molecules within cells by a process known as membrane transport is critical for normal cell function and also exploited by bacteria to promote infection. The pathway that connects the import pathway to the export pathway is essential for the function of a large number of proteins, however this connecting pathway is poorly characterised. This study will define the machinery of this trafficking pathway, which will provide the ability to modulate biological processes and cytotoxicity.\",\n    \"finalKeywords\": [\n        \"270199\",\n        \"Golgi apparatus\",\n        \"endocytosis\",\n        \"membrane transport\",\n        \"protein trafficking\",\n        \"secretion\",\n        \"HIV-AIDS\",\n        \"bacterial pathogen\",\n        \"hormone secretion\",\n        \"immune development\",\n        \"lysosomal storage disorder\"\n    ],\n    \"contributor_ci\": {\n        \"text_full_name\": \"Prof Paul Gleeson\",\n        \"email\": \"notAReal@email.edu.au\",\n        \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n    },\n    \"contributor_data_manager\": {\n        \"text_full_name\": \"Prof Paul Gleeson\",\n        \"email\": \"notAReal@email.edu.au\",\n        \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n    },\n    \"contributors\": [\n        {\n            \"text_full_name\": \"Prof Paul Gleeson\",\n            \"email\": \"notAReal@email.edu.au\",\n            \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n        }\n    ],\n    \"vivo:Dataset_redbox:DataCollectionMethodology\": \"The data collection methodology\",\n    \"vivo:Dataset_dc_format\": \"xls\",\n    \"vivo:Dataset_dc:location_rdf:PlainLiteral\": \"eResearch Store network drive\",\n    \"vivo:Dataset_dc:source_dc:location_rdf:PlainLiteral\": \"shared university network drive (e.g. G, H, etc)\",\n    \"vivo:Dataset_dc:extent\": \"100GB - 2TB\",\n    \"redbox:retentionPeriod_dc:date\": \"1year\",\n    \"dc:rightsHolder_dc:name\": \"myUni\",\n    \"dc:accessRights\": \"permission from the data manager\",\n    \"authorization\": []\n}"
						},
						"url": {
							"raw": "{{host}}/default/rdmp/api/records/metadata/rdmp",
							"host": [
								"{{host}}"
							],
							"path": [
								"default",
								"rdmp",
								"api",
								"records",
								"metadata",
								"rdmp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get RDMP's Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a40880e6-2c93-4fa3-b931-5ecb68c4c944",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Title is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql(\"Andrew's Postman test\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/default/rdmp/api/records/metadata/{{dmpOid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"default",
								"rdmp",
								"api",
								"records",
								"metadata",
								"{{dmpOid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update RDMP Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd7a0438-9af9-4277-8325-a3bbf8109292",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test oid is equal to the requested oid value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('oid');",
									"    pm.expect(jsonData.oid).to.eql(postman.getEnvironmentVariable(\"dmpOid\")); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Andrew's Postman test - Updated\",\n    \"dc:identifier\": \"http://purl.org/au-research/grants/nhmrc/566728\",\n    \"description\": \"Movement of molecules within cells by a process known as membrane transport is critical for normal cell function and also exploited by bacteria to promote infection. The pathway that connects the import pathway to the export pathway is essential for the function of a large number of proteins, however this connecting pathway is poorly characterised. This study will define the machinery of this trafficking pathway, which will provide the ability to modulate biological processes and cytotoxicity.\",\n    \"finalKeywords\": [\n        \"270199\",\n        \"Golgi apparatus\",\n        \"endocytosis\",\n        \"membrane transport\",\n        \"protein trafficking\",\n        \"secretion\",\n        \"HIV-AIDS\",\n        \"bacterial pathogen\",\n        \"hormone secretion\",\n        \"immune development\",\n        \"lysosomal storage disorder\"\n    ],\n    \"contributor_ci\": {\n        \"text_full_name\": \"Prof Paul Gleeson\",\n        \"email\": \"notAReal@email.edu.au\",\n        \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n    },\n    \"contributor_data_manager\": {\n        \"text_full_name\": \"Prof Paul Gleeson\",\n        \"email\": \"notAReal@email.edu.au\",\n        \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n    },\n    \"contributors\": [\n        {\n            \"text_full_name\": \"Prof Paul Gleeson\",\n            \"email\": \"notAReal@email.edu.au\",\n            \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n        }\n    ],\n    \"vivo:Dataset_redbox:DataCollectionMethodology\": \"The data collection methodology\",\n    \"vivo:Dataset_dc_format\": \"xls\",\n    \"vivo:Dataset_dc:location_rdf:PlainLiteral\": \"eResearch Store network drive\",\n    \"vivo:Dataset_dc:source_dc:location_rdf:PlainLiteral\": \"shared university network drive (e.g. G, H, etc)\",\n    \"vivo:Dataset_dc:extent\": \"100GB - 2TB\",\n    \"redbox:retentionPeriod_dc:date\": \"1year\",\n    \"dc:rightsHolder_dc:name\": \"myUni\",\n    \"dc:accessRights\": \"permission from the data manager\",\n    \"authorization\": []\n}"
						},
						"url": {
							"raw": "{{host}}/default/rdmp/api/records/metadata/{{dmpOid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"default",
								"rdmp",
								"api",
								"records",
								"metadata",
								"{{dmpOid}}"
							]
						},
						"description": "http://localhost:1500/default/rdmp/api/records/rdmp/create"
					},
					"response": []
				},
				{
					"name": "Get RDMP's Metadata - Updated Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a40880e6-2c93-4fa3-b931-5ecb68c4c944",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Title is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql(\"Andrew's Postman test - Updated\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/default/rdmp/api/records/metadata/{{dmpOid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"default",
								"rdmp",
								"api",
								"records",
								"metadata",
								"{{dmpOid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Give user edit permissions to RDMP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b047fdd6-0438-4b0c-8cbd-23840ff55360",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Edit permissions applied\", function () {",
									"    var jsonData = pm.response.json();",
									"    //TODO: This is because of the save trigger",
									"    pm.expect(jsonData.edit).to.eql([]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"users\": [\"user\"]\n}"
						},
						"url": {
							"raw": "{{host}}/default/rdmp/api/records/permissions/edit/{{dmpOid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"default",
								"rdmp",
								"api",
								"records",
								"permissions",
								"edit",
								"{{dmpOid}}"
							]
						},
						"description": "http://localhost:1500/default/rdmp/api/records/rdmp/create"
					},
					"response": []
				},
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "63db769f-0404-45b5-933c-8629e3d44bd7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Number of users returned in results array equals numFound or 10\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var numFound = jsonData.summary.numFound;",
									"    ",
									"    if(numFound < 10) {",
									"        pm.expect(jsonData.records.length).to.eql(numFound);",
									"    } else {",
									"        pm.expect(jsonData.records.length).to.eql(10);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/default/rdmp/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"default",
								"rdmp",
								"api",
								"users"
							]
						},
						"description": "http://localhost:1500/default/rdmp/api/records/rdmp/create"
					},
					"response": []
				}
			]
		},
		{
			"name": "AJAX calls",
			"item": [
				{
					"name": "Dashboard List RDMP Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72f352bc-687f-46bd-9714-385416301e69",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Number of items returned in results array equals totalItems or 10\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var numFound = jsonData.totalItems;",
									"    ",
									"    if(numFound < 10) {",
									"        pm.expect(jsonData.items.length).to.eql(numFound);",
									"    } else {",
									"        pm.expect(jsonData.items.length).to.eql(10);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Source",
								"value": "jsclient",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{host}}/default/rdmp/dashboard/rdmp",
								"type": "text",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"value": "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/default/rdmp/listRecords?recordType=rdmp&state=draft&sort=date_object_modified:-1&start=0&rows=10",
							"host": [
								"{{host}}"
							],
							"path": [
								"default",
								"rdmp",
								"listRecords"
							],
							"query": [
								{
									"key": "recordType",
									"value": "rdmp"
								},
								{
									"key": "state",
									"value": "draft"
								},
								{
									"key": "sort",
									"value": "date_object_modified:-1"
								},
								{
									"key": "start",
									"value": "0"
								},
								{
									"key": "rows",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get view form config for RDMP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72f352bc-687f-46bd-9714-385416301e69",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"RDMP form name is default-1.0-draft\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var numFound = jsonData.totalItems;",
									"    pm.expect(jsonData.name).to.eql(\"default-1.0-draft\");",
									"});",
									"",
									"pm.test(\"Fields array has values\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var numFound = jsonData.totalItems;",
									"    pm.expect(jsonData.fields).to.be.an('array').that.is.not.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Source",
								"value": "jsclient",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{host}}/default/rdmp/dashboard/rdmp",
								"type": "text",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"value": "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/default/rdmp/record/form/auto/{{dmpOid}}?edit=false",
							"host": [
								"{{host}}"
							],
							"path": [
								"default",
								"rdmp",
								"record",
								"form",
								"auto",
								"{{dmpOid}}"
							],
							"query": [
								{
									"key": "edit",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get edit form config for RDMP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72f352bc-687f-46bd-9714-385416301e69",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"RDMP form name is default-1.0-draft\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var numFound = jsonData.totalItems;",
									"    pm.expect(jsonData.name).to.eql(\"default-1.0-draft\");",
									"});",
									"",
									"pm.test(\"Fields array has values\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var numFound = jsonData.totalItems;",
									"    pm.expect(jsonData.fields).to.be.an('array').that.is.not.empty",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Source",
								"type": "text",
								"value": "jsclient"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Referer",
								"type": "text",
								"value": "{{host}}/default/rdmp/dashboard/rdmp",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/default/rdmp/record/form/auto/{{dmpOid}}?edit=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"default",
								"rdmp",
								"record",
								"form",
								"auto",
								"{{dmpOid}}"
							],
							"query": [
								{
									"key": "edit",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update RDMP Metadata using AJAX form call",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Pragma",
								"value": "no-cache"
							},
							{
								"key": "Origin",
								"value": "http://localhost:1337"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9,en-AU;q=0.8,it;q=0.7"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36"
							},
							{
								"key": "X-Source",
								"value": "jsclient"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=UTF-8"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Referer",
								"value": "http://localhost:1337/default/rdmp/record/edit/{{dmpOid}}"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Andrew's Postman test - Updated from form AJAX call\",\n    \"dc:identifier\": \"http://purl.org/au-research/grants/nhmrc/566728\",\n    \"description\": \"Movement of molecules within cells by a process known as membrane transport is critical for normal cell function and also exploited by bacteria to promote infection. The pathway that connects the import pathway to the export pathway is essential for the function of a large number of proteins, however this connecting pathway is poorly characterised. This study will define the machinery of this trafficking pathway, which will provide the ability to modulate biological processes and cytotoxicity.\",\n    \"finalKeywords\": [\n        \"270199\",\n        \"Golgi apparatus\",\n        \"endocytosis\",\n        \"membrane transport\",\n        \"protein trafficking\",\n        \"secretion\",\n        \"HIV-AIDS\",\n        \"bacterial pathogen\",\n        \"hormone secretion\",\n        \"immune development\",\n        \"lysosomal storage disorder\"\n    ],\n    \"contributor_ci\": {\n        \"text_full_name\": \"Prof Paul Gleeson\",\n        \"email\": \"notAReal@email.edu.au\",\n        \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n    },\n    \"contributor_data_manager\": {\n        \"text_full_name\": \"Prof Paul Gleeson\",\n        \"email\": \"notAReal@email.edu.au\",\n        \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n    },\n    \"contributors\": [\n        {\n            \"text_full_name\": \"Prof Paul Gleeson\",\n            \"email\": \"notAReal@email.edu.au\",\n            \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n        }\n    ],\n    \"vivo:Dataset_redbox:DataCollectionMethodology\": \"The data collection methodology\",\n    \"vivo:Dataset_dc_format\": \"xls\",\n    \"vivo:Dataset_dc:location_rdf:PlainLiteral\": \"eResearch Store network drive\",\n    \"vivo:Dataset_dc:source_dc:location_rdf:PlainLiteral\": \"shared university network drive (e.g. G, H, etc)\",\n    \"vivo:Dataset_dc:extent\": \"100GB - 2TB\",\n    \"redbox:retentionPeriod_dc:date\": \"1year\",\n    \"dc:rightsHolder_dc:name\": \"myUni\",\n    \"dc:accessRights\": \"permission from the data manager\",\n    \"authorization\": []\n}"
						},
						"url": {
							"raw": "{{host}}/default/rdmp/recordmeta/{{dmpOid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"default",
								"rdmp",
								"recordmeta",
								"{{dmpOid}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
